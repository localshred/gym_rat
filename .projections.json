{
  "*": {
    "start": "npm start",
    "make": "npm test",
    "dispatch": "npm test"
  },

  "lib/*.ex": {
    "alternate": "test/{}_test.exs",
    "type": "src",
    "template": [
      "defmodule {camelcase|capitalize|dot} do",
      "",
      "end"
    ]
  },

  "lib/gym_rat_web/graphql/*/mutations.ex": {
    "alternate": "test/gym_rat_web/graphql/{snakecase}/mutations_test.exs",
    "type": "mutation",
    "template": [
      "defmodule GymRatWeb.Graphql.{plural|camelcase|capitalize|dot}.Mutations do",
      "  use Absinthe.Schema.Notation",
      "",
      "  ## FIXME",
      "  ## Be sure to add the following line into lib/gym_rat_web/graphql/schema.ex:",
      "  ##",
      "  ##   import_types(GymRatWeb.Graphql.{plural|camelcase|capitalize|dot}.Mutations)",
      "  ##",
      "  ## Also be sure to import the query fields into the `query` block of the same file:",
      "  ##",
      "  ##   mutation do",
      "  ##     ...",
      "  ##     import_fields(:{plural|snakecase}_mutations)",
      "  ##     ...",
      "  ##   end",
      "  ##",
      "",
      "  # TODO alias GymRat.{open}Context{close}, as: Context",
      "  alias GymRat.Graphql",
      "  alias GymRat.Lore",
      "",
      "  input_object :create_{singular|snakecase}_input do",
      "    # TODO copy fields from lib/gym_rat_web/graphql/{plural|snakecase}/types.ex :{singular|snakecase} type (keeping nulls)",
      "  end",
      "",
      "  object :create_{singular|snakecase}_response do",
      "    field(:{singular|snakecase}, non_null(:{singular|snakecase}))",
      "  end",
      "",
      "  input_object :update_{singular|snakecase}_input do",
      "    # TODO copy fields from lib/gym_rat_web/graphql/{plural|snakecase}/types.ex :{singular|snakecase} type (removing nulls)",
      "  end",
      "",
      "  object :update_{singular|snakecase}_response do",
      "    field(:{singular|snakecase}, non_null(:{singular|snakecase}))",
      "  end",
      "",
      "  object :{plural|snakecase}_mutations do",
      "    field :create_{singular|snakecase}, non_null(:create_{singular|snakecase}_response) do",
      "      arg(:{singular|snakecase}, non_null(:create_{singular|snakecase}_input))",
      "      resolve(&create_{singular|snakecase}/2)",
      "    end",
      "",
      "    field :delete_{singular|snakecase}, non_null(:delete_record_response) do",
      "      arg(:query, non_null(:get_record_input))",
      "      resolve(&delete_{singular|snakecase}/2)",
      "    end",
      "",
      "    field :update_{singular|snakecase}, non_null(:update_{singular|snakecase}_response) do",
      "      arg(:query, non_null(:get_record_input))",
      "      arg(:{singular|snakecase}, non_null(:update_{singular|snakecase}_input))",
      "      resolve(&update_{singular|snakecase}/2)",
      "    end",
      "  end",
      "",
      "  def create_{singular|snakecase}(args, _context) do",
      "    args",
      "    |> Lore.prop(:{singular|snakecase})",
      "    |> Context.create_{singular|snakecase}()",
      "    |> Graphql.db_result_to_response(:{singular|snakecase})",
      "  end",
      "",
      "  def delete_{singular|snakecase}(args, _context) do",
      "    args",
      "    |> Lore.path([:query, :id])",
      "    |> Context.get_{singular|snakecase}()",
      "    |> Graphql.delete_record(&Context.delete_{singular|snakecase}/1)",
      "  end",
      "",
      "  def update_{singular|snakecase}(args, _context) do",
      "    try do",
      "      args",
      "      |> Lore.path([:query, :id])",
      "      |> Context.get_{singular|snakecase}!()",
      "      |> Context.update_{singular|snakecase}(args.{singular|snakecase})",
      "      |> Graphql.db_result_to_response(:{singular|snakecase})",
      "    rescue",
      "      _exception ->",
      "        Lore.error(\"Unable to update {singular|snakecase}\")",
      "    end",
      "  end",
      "end"
    ]
  },

  "lib/gym_rat_web/graphql/*/queries.ex": {
    "alternate": "test/gym_rat_web/graphql/{snakecase}/queries_test.exs",
    "type": "query",
    "template": [
      "defmodule GymRatWeb.Graphql.{plural|camelcase|capitalize|dot}.Queries do",
      "  use Absinthe.Schema.Notation",
      "",
      "  ## FIXME",
      "  ## Be sure to add the following line into lib/gym_rat_web/graphql/schema.ex:",
      "  ##",
      "  ##   import_types(GymRatWeb.Graphql.{plural|camelcase|capitalize|dot}.Queries)",
      "  ##",
      "  ## Also be sure to import the query fields into the `query` block of the same file:",
      "  ##",
      "  ##   query do",
      "  ##     ...",
      "  ##     import_fields(:{plural|snakecase}_queries)",
      "  ##     ...",
      "  ##   end",
      "  ##",
      "",
      "  # TODO alias GymRat.{open}Context{close}, as: Context",
      "  alias GymRat.Lore",
      "",
      "  object :{singular|snakecase}_response do",
      "    field(:{singular|snakecase}, :{singular|snakecase})",
      "  end",

      "  object :{plural|snakecase}_response do",
      "    field(:{plural|snakecase}, :{singular|snakecase} |> non_null |> list_of |> non_null)",
      "  end",

      "  object :{plural|snakecase}_queries do",
      "    field :{singular|snakecase}, non_null(:{singular|snakecase}_response) do",
      "      arg(:query, non_null(:get_record_input))",
      "      resolve(&get_{singular|snakecase}/2)",
      "    end",

      "    field :{plural|snakecase}, non_null(:{plural|snakecase}_response) do",
      "      arg(:query, non_null(:get_records_input))",
      "      resolve(&list_{plural|snakecase}/2)",
      "    end",
      "  end",

      "  def get_{singular|snakecase}(args, _context) do",
      "    args",
      "    |> Lore.path([:query, :id])",
      "    |> Context.get_{singular|snakecase}()",
      "    |> Lore.assoc_prop(:{singular|snakecase})",
      "    |> Lore.ok()",
      "  end",

      "  def list_{plural|snakecase}(args, _context) do",
      "    args",
      "    |> Lore.path([:query, :ids])",
      "    |> Lore.default_to([])",
      "    |> Context.list_{plural|snakecase}()",
      "    |> Lore.default_to([])",
      "    |> Lore.assoc_prop(:{plural|snakecase})",
      "    |> Lore.ok()",
      "  end",
      "end"
    ]
  },

  "lib/gym_rat_web/graphql/*/types.ex": {
    "alternate": "test/gym_rat_web/graphql/{snakecase}/types_test.exs",
    "type": "types",
    "template": [
      "defmodule GymRatWeb.Graphql.{plural|camelcase|capitalize|dot}.Types do",
      "  use Absinthe.Schema.Notation",
      "  use Absinthe.Ecto, repo: GymRat.Repo",
      "",
      "  alias GymRat.{Lore, Graphql}",
      "",
      "  ## FIXME",
      "  ## Be sure to add the following line into lib/gym_rat_web/graphql/schema.ex:",
      "  ##",
      "  ##   import_types(GymRatWeb.Graphql.{plural|camelcase|capitalize|dot}.Types)",
      "",
      "  object :{singular|snakecase} do",
      "    # TODO add appropriate fields",
      "  end",
      "end"
    ]
  },

  "test/gym_rat/*_test.exs": {
    "type": "test",
    "alternate": "lib/gym_rat/{}.ex",
    "make": "mix test {file}",
    "dispatch": "mix test {file}",
    "template": [
      "defmodule {camelcase|capitalize|dot}Test do",
      "  use GymRat.DataCase",
      "",
      "  import GymRat.TestFactories",
      "",
      "  alias {camelcase|capitalize|dot}",
      "",
      "  describe \"fn\" do",
      "    test \"some test\" do",
      "      assert true == false",
      "    end",
      "  end",
      "",
      "end"
    ]
  },

  "test/gym_rat_web/*_test.exs": {
    "type": "test",
    "alternate": "lib/gym_rat_web/{}.ex",
    "make": "mix test {file}",
    "dispatch": "mix test {file}",
    "template": [
      "defmodule {camelcase|capitalize|dot}Test do",
      "  use GymRatWeb.ConnCase",
      "",
      "  import GymRat.TestFactories",
      "",
      "  alias {camelcase|capitalize|dot}",
      "",
      "  describe \"fn\" do",
      "    test \"some test\" do",
      "      assert true == false",
      "    end",
      "  end",
      "",
      "end"
    ]
  }
}
